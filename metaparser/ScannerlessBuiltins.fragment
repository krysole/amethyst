match(rule, input, name) {
  this._input    = input;
  this._name     = (name != null ? name : "unnamed");
  this._position = 0;
  this._furthest = 0;

  let result = this[rule]();
  if (result !== FAIL) {
    return result;
  }
  else {
    throw new Error(`Failed to match, furthest position ${this._linecol(this._furthest)}.`);
  }
}

log(message) {
  console.error(`${this.constructor.name}.prototype.log() ${this._linecol()} ${message}`);
}

_linecol(position) {
  if (position == null) position = this._position;

  let line   = 1;
  let column = 1;

  for (let i = 0; i < position; i++) {
    if (this._input[i] === "\r") {
      if (this._input[i + 1] === "\n") i++;
      line   = line + 1;
      column = 1;
    }
    else if (this._input[i] === "\n") {
      if (this._input[i + 1] === "\r") i++;
      line   = line + 1;
      column = 1;
    }
    else {
      column = column + 1;
    }
  }

  return {
    name: this._name,
    line: line,
    column: column,
    toString: function toString() { return `${this.name}:${this.line}:${this.column}`; }
  };
}

char(charset) {
  if (this._position >= this._input.length) return FAIL;

  let c = this._input[this._position];
  if (charset != null && !charset.includes(c)) return FAIL;

  this._position += 1;
  if (this._position > this._furthest) this._furthest = this._position;

  return c;
}

range(start, end) {
  if (this._position >= this._input.length) return FAIL;

  let c = this._input[this._position];
  if (c < start || c > end) return FAIL;

  this._position += 1;
  if (this._position > this._furthest) this._furthest = this._position;

  return c;
}

string(string) {
  if (this._input.slice(this._position, this._position + string.length) !== string) return FAIL;

  this._position += string.length;
  if (this._position > this._furthest) this._furthest = this._position;

  return string;
}

nothing() {
  return null;
}

pos() {
  return this._position;
}

slice(start, end) {
  return this._input.slice(start, end);
}

text(parser) {
  let start = this.pos();
  if (start === FAIL) return FAIL;

  let result = parser();
  if (result === FAIL) return FAIL;

  let end = this.pos();
  if (end === FAIL) return FAIL;

  let text = this.slice(start, end);
  if (text === FAIL) return FAIL;

  return text;
}
