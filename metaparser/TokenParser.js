// Generated by MetaParser 1.0-pre.
"use strict";

const FAIL = Symbol("FAIL");

export class TokenParser {
  
  match(rule, input, name) {
    this._input    = input;
    this._name     = (name != null ? name : "unnamed");
    this._position = 0;
    this._furthest = 0;
  
    let result = this[rule]();
    if (result !== FAIL) {
      return result;
    }
    else {
      throw new Error(`Failed to match, furthest position ${this._linecol(this._furthest)}.`);
    }
  }
  
  log(message) {
    console.error(`${this.constructor.name}.prototype.log() ${this._linecol()} ${message}`);
  }
  
  _linecol(position) {
    if (position == null) position = this._position;
  
    let line   = 1;
    let column = 1;
  
    for (let i = 0; i < position; i++) {
      if (this._input[i] === "\r") {
        if (this._input[i + 1] === "\n") i++;
        line   = line + 1;
        column = 1;
      }
      else if (this._input[i] === "\n") {
        if (this._input[i + 1] === "\r") i++;
        line   = line + 1;
        column = 1;
      }
      else {
        column = column + 1;
      }
    }
  
    return {
      name: this._name,
      line: line,
      column: column,
      toString: function toString() { return `${this.name}:${this.line}:${this.column}`; }
    };
  }
  
  char(charset) {
    if (this._position >= this._input.length) return FAIL;
  
    let c = this._input[this._position];
    if (charset != null && !charset.includes(c)) return FAIL;
  
    this._position += 1;
    if (this._position > this._furthest) this._furthest = this._position;
  
    return c;
  }
  
  range(start, end) {
    if (this._position >= this._input.length) return FAIL;
  
    let c = this._input[this._position];
    if (c < start || c > end) return FAIL;
  
    this._position += 1;
    if (this._position > this._furthest) this._furthest = this._position;
  
    return c;
  }
  
  string(string) {
    if (this._input.slice(this._position, this._position + string.length) !== string) return FAIL;
  
    this._position += string.length;
    if (this._position > this._furthest) this._furthest = this._position;
  
    return string;
  }
  
  nothing() {
    return null;
  }
  
  pos() {
    return this._position;
  }
  
  slice(start, end) {
    return this._input.slice(start, end);
  }
  
  text(parser) {
    let start = this.pos();
    if (start === FAIL) return FAIL;
  
    let result = parser();
    if (result === FAIL) return FAIL;
  
    let end = this.pos();
    if (end === FAIL) return FAIL;
  
    let text = this.slice(start, end);
    if (text === FAIL) return FAIL;
  
    return text;
  }
  
  
  grammar() {
    let RESULT = FAIL;
    let n, rs;
    
    while (true) { // SEQUENCE
      RESULT = this.id("grammar");
      if (RESULT === FAIL) break;
      
      RESULT = this.id();
      n = RESULT;
      if (RESULT === FAIL) break;
      
      RESULT = this.p("{");
      if (RESULT === FAIL) break;
      
      while (true) { // REPEAT
        let ARRAY = [];
        
        while (true) {
          let INITPOS = this._position;
          
          RESULT = this.rule();
          if (RESULT === FAIL) {
            this._position = INITPOS;
            break;
          }
          
          ARRAY.push(RESULT);
        }
        
        RESULT = ARRAY;
        break;
      }
      rs = RESULT;
      if (RESULT === FAIL) break;
      
      RESULT = this.p("}");
      if (RESULT === FAIL) break;
      
      RESULT = this.end();
      if (RESULT === FAIL) break;
      
      RESULT = { tag: "Grammar", name: n, rules: rs };
      if (RESULT === FAIL) break;
      
      break;
    }
    
    return RESULT;
  }
  
  rule() {
    let RESULT = FAIL;
    let n, ps, p;
    
    while (true) { // SEQUENCE
      RESULT = this.id();
      n = RESULT;
      if (RESULT === FAIL) break;
      
      RESULT = this.parameters();
      ps = RESULT;
      if (RESULT === FAIL) break;
      
      RESULT = this.p("{");
      if (RESULT === FAIL) break;
      
      RESULT = this.choice();
      p = RESULT;
      if (RESULT === FAIL) break;
      
      RESULT = this.p("}");
      if (RESULT === FAIL) break;
      
      RESULT = { tag: "Rule", name: n, parameters: ps, pattern: p };
      if (RESULT === FAIL) break;
      
      break;
    }
    
    return RESULT;
  }
  
  parameters() {
    let RESULT = FAIL;
    let p, ps;
    
    while (true) { // CHOICE
      let INITPOS = this._position;
      
      this._position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.p("(");
        if (RESULT === FAIL) break;
        
        RESULT = this.id();
        p = RESULT;
        if (RESULT === FAIL) break;
        
        while (true) { // REPEAT
          let ARRAY = [];
          
          while (true) {
            let INITPOS = this._position;
            
            while (true) { // SEQUENCE
              RESULT = this.p(",");
              if (RESULT === FAIL) break;
              
              RESULT = this.id();
              if (RESULT === FAIL) break;
              
              break;
            }
            if (RESULT === FAIL) {
              this._position = INITPOS;
              break;
            }
            
            ARRAY.push(RESULT);
          }
          
          RESULT = ARRAY;
          break;
        }
        ps = RESULT;
        if (RESULT === FAIL) break;
        
        RESULT = this.p(")");
        if (RESULT === FAIL) break;
        
        RESULT = ps.unshift(p);
        if (RESULT === FAIL) break;
        
        RESULT = ps;
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      RESULT = [];
      if (RESULT !== FAIL) break;
  
      break;
    }
    
    return RESULT;
  }
  
  choice() {
    let RESULT = FAIL;
    let a, b;
    
    while (true) { // SEQUENCE
      while (true) { // OPTIONAL
        let INITPOS = this._position;
        
        RESULT = this.p("|");
        if (RESULT === FAIL) {
          this._position = INITPOS;
          RESULT = null;
        }
        break;
      }
      if (RESULT === FAIL) break;
      
      RESULT = this.sequence();
      a = RESULT;
      if (RESULT === FAIL) break;
      
      while (true) { // REPEAT
        let ARRAY = [];
        
        while (true) {
          let INITPOS = this._position;
          
          while (true) { // SEQUENCE
            RESULT = this.p("|");
            if (RESULT === FAIL) break;
            
            RESULT = this.sequence();
            b = RESULT;
            if (RESULT === FAIL) break;
            
            RESULT = { tag: "Choice", patterns: [a, b] };
            a = RESULT;
            if (RESULT === FAIL) break;
            
            break;
          }
          if (RESULT === FAIL) {
            this._position = INITPOS;
            break;
          }
          
          ARRAY.push(RESULT);
        }
        
        RESULT = ARRAY;
        break;
      }
      if (RESULT === FAIL) break;
      
      RESULT = a;
      if (RESULT === FAIL) break;
      
      break;
    }
    
    return RESULT;
  }
  
  sequence() {
    let RESULT = FAIL;
    let a, b;
    
    while (true) { // SEQUENCE
      RESULT = this.bind();
      a = RESULT;
      if (RESULT === FAIL) break;
      
      while (true) { // REPEAT
        let ARRAY = [];
        
        while (true) {
          let INITPOS = this._position;
          
          while (true) { // SEQUENCE
            RESULT = this.ws();
            if (RESULT === FAIL) break;
            
            RESULT = this.bind();
            b = RESULT;
            if (RESULT === FAIL) break;
            
            RESULT = { tag: "Sequence", patterns: [a, b] };
            a = RESULT;
            if (RESULT === FAIL) break;
            
            break;
          }
          if (RESULT === FAIL) {
            this._position = INITPOS;
            break;
          }
          
          ARRAY.push(RESULT);
        }
        
        RESULT = ARRAY;
        break;
      }
      if (RESULT === FAIL) break;
      
      RESULT = a;
      if (RESULT === FAIL) break;
      
      break;
    }
    
    return RESULT;
  }
  
  bind() {
    let RESULT = FAIL;
    let p, n;
    
    while (true) { // CHOICE
      let INITPOS = this._position;
      
      this._position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.delimited();
        p = RESULT;
        if (RESULT === FAIL) break;
        
        while (true) { // NEGATE
          let INITPOS = this._position;
          
          RESULT = this.ws();
          if (RESULT === FAIL) RESULT = null;
          else                 RESULT = FAIL;
          
          this._position = INITPOS;
          break;
        }
        if (RESULT === FAIL) break;
        
        RESULT = this.p(":");
        if (RESULT === FAIL) break;
        
        while (true) { // NEGATE
          let INITPOS = this._position;
          
          RESULT = this.ws();
          if (RESULT === FAIL) RESULT = null;
          else                 RESULT = FAIL;
          
          this._position = INITPOS;
          break;
        }
        if (RESULT === FAIL) break;
        
        RESULT = this.id();
        n = RESULT;
        if (RESULT === FAIL) break;
        
        RESULT = { tag: "Bind", name: n, pattern: p };
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      RESULT = this.delimited();
      if (RESULT !== FAIL) break;
  
      break;
    }
    
    return RESULT;
  }
  
  delimited() {
    let RESULT = FAIL;
    let e, d;
    
    while (true) { // CHOICE
      let INITPOS = this._position;
      
      this._position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.p("(");
        if (RESULT === FAIL) break;
        
        RESULT = this.choice();
        e = RESULT;
        if (RESULT === FAIL) break;
        
        RESULT = this.p(";");
        if (RESULT === FAIL) break;
        
        RESULT = this.choice();
        d = RESULT;
        if (RESULT === FAIL) break;
        
        RESULT = this.p(")");
        if (RESULT === FAIL) break;
        
        while (true) { // CHOICE
          let INITPOS = this._position;
          
          this._position = INITPOS;
          while (true) { // SEQUENCE
            RESULT = this.p("*");
            if (RESULT === FAIL) break;
            
            RESULT = { tag: "Delimited",  element: e, delimiter: d };
            if (RESULT === FAIL) break;
            
            break;
          }
          if (RESULT !== FAIL) break;
          
          this._position = INITPOS;
          while (true) { // SEQUENCE
            RESULT = this.p("+");
            if (RESULT === FAIL) break;
            
            RESULT = { tag: "Delimited1", element: e, delimiter: d };
            if (RESULT === FAIL) break;
            
            break;
          }
          if (RESULT !== FAIL) break;
  
          break;
        }
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      RESULT = this.operator();
      if (RESULT !== FAIL) break;
  
      break;
    }
    
    return RESULT;
  }
  
  operator() {
    let RESULT = FAIL;
    let p;
    
    while (true) { // CHOICE
      let INITPOS = this._position;
      
      this._position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.p("~");
        if (RESULT === FAIL) break;
        
        RESULT = this.primary();
        p = RESULT;
        if (RESULT === FAIL) break;
        
        RESULT = { tag: "Negate",    pattern: p };
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.p("&");
        if (RESULT === FAIL) break;
        
        RESULT = this.primary();
        p = RESULT;
        if (RESULT === FAIL) break;
        
        RESULT = { tag: "Lookahead", pattern: p };
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.primary();
        p = RESULT;
        if (RESULT === FAIL) break;
        
        while (true) { // CHOICE
          let INITPOS = this._position;
          
          this._position = INITPOS;
          while (true) { // SEQUENCE
            RESULT = this.p("*");
            if (RESULT === FAIL) break;
            
            RESULT = { tag: "Repeat",    pattern: p };
            if (RESULT === FAIL) break;
            
            break;
          }
          if (RESULT !== FAIL) break;
          
          this._position = INITPOS;
          while (true) { // SEQUENCE
            RESULT = this.p("+");
            if (RESULT === FAIL) break;
            
            RESULT = { tag: "Repeat1",   pattern: p };
            if (RESULT === FAIL) break;
            
            break;
          }
          if (RESULT !== FAIL) break;
          
          this._position = INITPOS;
          while (true) { // SEQUENCE
            RESULT = this.p("?");
            if (RESULT === FAIL) break;
            
            RESULT = { tag: "Optional",  pattern: p };
            if (RESULT === FAIL) break;
            
            break;
          }
          if (RESULT !== FAIL) break;
  
          break;
        }
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      RESULT = this.primary();
      if (RESULT !== FAIL) break;
  
      break;
    }
    
    return RESULT;
  }
  
  primary() {
    let RESULT = FAIL;
    
    while (true) { // CHOICE
      let INITPOS = this._position;
      
      this._position = INITPOS;
      RESULT = this.immediate();
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      RESULT = this.action();
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      RESULT = this.predicate();
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      RESULT = this.tokentag();
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      RESULT = this.tokentext();
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      RESULT = this.pcall();
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      RESULT = this.call();
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      RESULT = this.subpattern();
      if (RESULT !== FAIL) break;
  
      break;
    }
    
    return RESULT;
  }
  
  immediate() {
    let RESULT = FAIL;
    let c;
    
    while (true) { // SEQUENCE
      RESULT = this.p("%");
      if (RESULT === FAIL) break;
      
      RESULT = this.jsInline();
      c = RESULT;
      if (RESULT === FAIL) break;
      
      RESULT = { tag: "Immediate", code: c };
      if (RESULT === FAIL) break;
      
      break;
    }
    
    return RESULT;
  }
  
  action() {
    let RESULT = FAIL;
    let c;
    
    while (true) { // SEQUENCE
      RESULT = this.p("!");
      if (RESULT === FAIL) break;
      
      RESULT = this.jsInline();
      c = RESULT;
      if (RESULT === FAIL) break;
      
      RESULT = { tag: "Action", code: c };
      if (RESULT === FAIL) break;
      
      break;
    }
    
    return RESULT;
  }
  
  predicate() {
    let RESULT = FAIL;
    let c;
    
    while (true) { // SEQUENCE
      RESULT = this.p("?");
      if (RESULT === FAIL) break;
      
      RESULT = this.jsInline();
      c = RESULT;
      if (RESULT === FAIL) break;
      
      RESULT = { tag: "Predicate", code: c };
      if (RESULT === FAIL) break;
      
      break;
    }
    
    return RESULT;
  }
  
  tokentag() {
    let RESULT = FAIL;
    let n;
    
    while (true) { // SEQUENCE
      RESULT = this.tag();
      n = RESULT;
      if (RESULT === FAIL) break;
      
      RESULT = { tag: "TokenTag", name: n };
      if (RESULT === FAIL) break;
      
      break;
    }
    
    return RESULT;
  }
  
  tokentext() {
    let RESULT = FAIL;
    let s;
    
    while (true) { // SEQUENCE
      RESULT = this.str();
      s = RESULT;
      if (RESULT === FAIL) break;
      
      RESULT = { tag: "TokenText", text: s };
      if (RESULT === FAIL) break;
      
      break;
    }
    
    return RESULT;
  }
  
  pcall() {
    let RESULT = FAIL;
    let n, ps;
    
    while (true) { // SEQUENCE
      RESULT = this.id();
      n = RESULT;
      if (RESULT === FAIL) break;
      
      RESULT = this.p("[");
      if (RESULT === FAIL) break;
      
      while (true) { // DELIMITED
        let ARRAY = [];
        
        while (true) {
          let INITPOS = this._position;
          
          if (ARRAY.length > 0) {
            RESULT = this.p(",");
            if (RESULT === FAIL) {
              this._position = INITPOS;
              break;
            }
          }
          
          RESULT = this.choice();
          if (RESULT === FAIL) {
            this._position = INITPOS;
            break;
          }
          
          ARRAY.push(RESULT);
        }
        RESULT = ARRAY;
        break;
      }
      ps = RESULT;
      if (RESULT === FAIL) break;
      
      RESULT = this.p("]");
      if (RESULT === FAIL) break;
      
      RESULT = { tag: "PCall", name: n, patterns: ps };
      if (RESULT === FAIL) break;
      
      break;
    }
    
    return RESULT;
  }
  
  call() {
    let RESULT = FAIL;
    let n, c;
    
    while (true) { // SEQUENCE
      RESULT = this.id();
      n = RESULT;
      if (RESULT === FAIL) break;
      
      while (true) { // OPTIONAL
        let INITPOS = this._position;
        
        RESULT = this.jsEnclosed();
        if (RESULT === FAIL) {
          this._position = INITPOS;
          RESULT = null;
        }
        break;
      }
      c = RESULT;
      if (RESULT === FAIL) break;
      
      RESULT = { tag: "Call", name: n, code: c };
      if (RESULT === FAIL) break;
      
      break;
    }
    
    return RESULT;
  }
  
  subpattern() {
    let RESULT = FAIL;
    let p;
    
    while (true) { // SEQUENCE
      RESULT = this.p("(");
      if (RESULT === FAIL) break;
      
      RESULT = this.choice();
      p = RESULT;
      if (RESULT === FAIL) break;
      
      RESULT = this.p(")");
      if (RESULT === FAIL) break;
      
      RESULT = p;
      if (RESULT === FAIL) break;
      
      break;
    }
    
    return RESULT;
  }
  
  jsInline() {
    let RESULT = FAIL;
    
    RESULT = this.text(
      () => {
        let RESULT = FAIL;
        
        while (true) { // REPEAT1
          let ARRAY = [];
          
          while (true) {
            let INITPOS = this._position;
            
            RESULT = this.jsInlineFragment();
            if (RESULT === FAIL) {
              this._position = INITPOS;
              break;
            }
            
            ARRAY.push(RESULT);
          }
          
          if (ARRAY.length === 0) RESULT = FAIL;
          else                    RESULT = ARRAY;
          break;
        }
        
        return RESULT;
      }
    );
    
    return RESULT;
  }
  
  jsInlineFragment() {
    let RESULT = FAIL;
    
    while (true) { // CHOICE
      let INITPOS = this._position;
      
      this._position = INITPOS;
      RESULT = this.range("A", "Z");
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      RESULT = this.range("a", "z");
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      RESULT = this.char("_$");
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      RESULT = this.range("0", "9");
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      RESULT = this.char(".");
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      RESULT = this.char("!");
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.char("(");
        if (RESULT === FAIL) break;
        
        while (true) { // REPEAT
          let ARRAY = [];
          
          while (true) {
            let INITPOS = this._position;
            
            RESULT = this.jsEnclosedFragment();
            if (RESULT === FAIL) {
              this._position = INITPOS;
              break;
            }
            
            ARRAY.push(RESULT);
          }
          
          RESULT = ARRAY;
          break;
        }
        if (RESULT === FAIL) break;
        
        RESULT = this.char(")");
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.char("[");
        if (RESULT === FAIL) break;
        
        while (true) { // REPEAT
          let ARRAY = [];
          
          while (true) {
            let INITPOS = this._position;
            
            RESULT = this.jsEnclosedFragment();
            if (RESULT === FAIL) {
              this._position = INITPOS;
              break;
            }
            
            ARRAY.push(RESULT);
          }
          
          RESULT = ARRAY;
          break;
        }
        if (RESULT === FAIL) break;
        
        RESULT = this.char("]");
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.char("{");
        if (RESULT === FAIL) break;
        
        while (true) { // REPEAT
          let ARRAY = [];
          
          while (true) {
            let INITPOS = this._position;
            
            RESULT = this.jsEnclosedFragment();
            if (RESULT === FAIL) {
              this._position = INITPOS;
              break;
            }
            
            ARRAY.push(RESULT);
          }
          
          RESULT = ARRAY;
          break;
        }
        if (RESULT === FAIL) break;
        
        RESULT = this.char("}");
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.char("\"");
        if (RESULT === FAIL) break;
        
        while (true) { // REPEAT
          let ARRAY = [];
          
          while (true) {
            let INITPOS = this._position;
            
            while (true) { // CHOICE
              let INITPOS = this._position;
              
              this._position = INITPOS;
              while (true) { // SEQUENCE
                RESULT = this.char("\\");
                if (RESULT === FAIL) break;
                
                RESULT = this.char();
                if (RESULT === FAIL) break;
                
                break;
              }
              if (RESULT !== FAIL) break;
              
              this._position = INITPOS;
              while (true) { // SEQUENCE
                while (true) { // NEGATE
                  let INITPOS = this._position;
                  
                  RESULT = this.char("\"");
                  if (RESULT === FAIL) RESULT = null;
                  else                 RESULT = FAIL;
                  
                  this._position = INITPOS;
                  break;
                }
                if (RESULT === FAIL) break;
                
                RESULT = this.char();
                if (RESULT === FAIL) break;
                
                break;
              }
              if (RESULT !== FAIL) break;
  
              break;
            }
            if (RESULT === FAIL) {
              this._position = INITPOS;
              break;
            }
            
            ARRAY.push(RESULT);
          }
          
          RESULT = ARRAY;
          break;
        }
        if (RESULT === FAIL) break;
        
        RESULT = this.char("\"");
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.char("\'");
        if (RESULT === FAIL) break;
        
        while (true) { // REPEAT
          let ARRAY = [];
          
          while (true) {
            let INITPOS = this._position;
            
            while (true) { // CHOICE
              let INITPOS = this._position;
              
              this._position = INITPOS;
              while (true) { // SEQUENCE
                RESULT = this.char("\\");
                if (RESULT === FAIL) break;
                
                RESULT = this.char();
                if (RESULT === FAIL) break;
                
                break;
              }
              if (RESULT !== FAIL) break;
              
              this._position = INITPOS;
              while (true) { // SEQUENCE
                while (true) { // NEGATE
                  let INITPOS = this._position;
                  
                  RESULT = this.char("\'");
                  if (RESULT === FAIL) RESULT = null;
                  else                 RESULT = FAIL;
                  
                  this._position = INITPOS;
                  break;
                }
                if (RESULT === FAIL) break;
                
                RESULT = this.char();
                if (RESULT === FAIL) break;
                
                break;
              }
              if (RESULT !== FAIL) break;
  
              break;
            }
            if (RESULT === FAIL) {
              this._position = INITPOS;
              break;
            }
            
            ARRAY.push(RESULT);
          }
          
          RESULT = ARRAY;
          break;
        }
        if (RESULT === FAIL) break;
        
        RESULT = this.char("\'");
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.char("`");
        if (RESULT === FAIL) break;
        
        while (true) { // REPEAT
          let ARRAY = [];
          
          while (true) {
            let INITPOS = this._position;
            
            while (true) { // CHOICE
              let INITPOS = this._position;
              
              this._position = INITPOS;
              while (true) { // SEQUENCE
                RESULT = this.string("${");
                if (RESULT === FAIL) break;
                
                while (true) { // REPEAT
                  let ARRAY = [];
                  
                  while (true) {
                    let INITPOS = this._position;
                    
                    RESULT = this.jsEnclosedFragment();
                    if (RESULT === FAIL) {
                      this._position = INITPOS;
                      break;
                    }
                    
                    ARRAY.push(RESULT);
                  }
                  
                  RESULT = ARRAY;
                  break;
                }
                if (RESULT === FAIL) break;
                
                RESULT = this.string("}");
                if (RESULT === FAIL) break;
                
                break;
              }
              if (RESULT !== FAIL) break;
              
              this._position = INITPOS;
              while (true) { // SEQUENCE
                RESULT = this.char("\\");
                if (RESULT === FAIL) break;
                
                RESULT = this.char();
                if (RESULT === FAIL) break;
                
                break;
              }
              if (RESULT !== FAIL) break;
              
              this._position = INITPOS;
              while (true) { // SEQUENCE
                while (true) { // NEGATE
                  let INITPOS = this._position;
                  
                  RESULT = this.char("`");
                  if (RESULT === FAIL) RESULT = null;
                  else                 RESULT = FAIL;
                  
                  this._position = INITPOS;
                  break;
                }
                if (RESULT === FAIL) break;
                
                RESULT = this.char();
                if (RESULT === FAIL) break;
                
                break;
              }
              if (RESULT !== FAIL) break;
  
              break;
            }
            if (RESULT === FAIL) {
              this._position = INITPOS;
              break;
            }
            
            ARRAY.push(RESULT);
          }
          
          RESULT = ARRAY;
          break;
        }
        if (RESULT === FAIL) break;
        
        RESULT = this.char("`");
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
  
      break;
    }
    
    return RESULT;
  }
  
  jsEnclosed() {
    let RESULT = FAIL;
    let s;
    
    while (true) { // SEQUENCE
      RESULT = this.char("(");
      if (RESULT === FAIL) break;
      
      RESULT = this.text(
        () => {
          let RESULT = FAIL;
          
          while (true) { // REPEAT
            let ARRAY = [];
            
            while (true) {
              let INITPOS = this._position;
              
              RESULT = this.jsEnclosedFragment();
              if (RESULT === FAIL) {
                this._position = INITPOS;
                break;
              }
              
              ARRAY.push(RESULT);
            }
            
            RESULT = ARRAY;
            break;
          }
          
          return RESULT;
        }
      );
      s = RESULT;
      if (RESULT === FAIL) break;
      
      RESULT = this.char(")");
      if (RESULT === FAIL) break;
      
      RESULT = s;
      if (RESULT === FAIL) break;
      
      break;
    }
    
    return RESULT;
  }
  
  jsEnclosedFragment() {
    let RESULT = FAIL;
    
    while (true) { // CHOICE
      let INITPOS = this._position;
      
      this._position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.char("(");
        if (RESULT === FAIL) break;
        
        while (true) { // REPEAT
          let ARRAY = [];
          
          while (true) {
            let INITPOS = this._position;
            
            RESULT = this.jsEnclosedFragment();
            if (RESULT === FAIL) {
              this._position = INITPOS;
              break;
            }
            
            ARRAY.push(RESULT);
          }
          
          RESULT = ARRAY;
          break;
        }
        if (RESULT === FAIL) break;
        
        RESULT = this.char(")");
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.char("[");
        if (RESULT === FAIL) break;
        
        while (true) { // REPEAT
          let ARRAY = [];
          
          while (true) {
            let INITPOS = this._position;
            
            RESULT = this.jsEnclosedFragment();
            if (RESULT === FAIL) {
              this._position = INITPOS;
              break;
            }
            
            ARRAY.push(RESULT);
          }
          
          RESULT = ARRAY;
          break;
        }
        if (RESULT === FAIL) break;
        
        RESULT = this.char("]");
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.char("{");
        if (RESULT === FAIL) break;
        
        while (true) { // REPEAT
          let ARRAY = [];
          
          while (true) {
            let INITPOS = this._position;
            
            RESULT = this.jsEnclosedFragment();
            if (RESULT === FAIL) {
              this._position = INITPOS;
              break;
            }
            
            ARRAY.push(RESULT);
          }
          
          RESULT = ARRAY;
          break;
        }
        if (RESULT === FAIL) break;
        
        RESULT = this.char("}");
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.char("\"");
        if (RESULT === FAIL) break;
        
        while (true) { // REPEAT
          let ARRAY = [];
          
          while (true) {
            let INITPOS = this._position;
            
            while (true) { // CHOICE
              let INITPOS = this._position;
              
              this._position = INITPOS;
              while (true) { // SEQUENCE
                RESULT = this.char("\\");
                if (RESULT === FAIL) break;
                
                RESULT = this.char();
                if (RESULT === FAIL) break;
                
                break;
              }
              if (RESULT !== FAIL) break;
              
              this._position = INITPOS;
              while (true) { // SEQUENCE
                while (true) { // NEGATE
                  let INITPOS = this._position;
                  
                  RESULT = this.char("\"");
                  if (RESULT === FAIL) RESULT = null;
                  else                 RESULT = FAIL;
                  
                  this._position = INITPOS;
                  break;
                }
                if (RESULT === FAIL) break;
                
                RESULT = this.char();
                if (RESULT === FAIL) break;
                
                break;
              }
              if (RESULT !== FAIL) break;
  
              break;
            }
            if (RESULT === FAIL) {
              this._position = INITPOS;
              break;
            }
            
            ARRAY.push(RESULT);
          }
          
          RESULT = ARRAY;
          break;
        }
        if (RESULT === FAIL) break;
        
        RESULT = this.char("\"");
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.char("\'");
        if (RESULT === FAIL) break;
        
        while (true) { // REPEAT
          let ARRAY = [];
          
          while (true) {
            let INITPOS = this._position;
            
            while (true) { // CHOICE
              let INITPOS = this._position;
              
              this._position = INITPOS;
              while (true) { // SEQUENCE
                RESULT = this.char("\\");
                if (RESULT === FAIL) break;
                
                RESULT = this.char();
                if (RESULT === FAIL) break;
                
                break;
              }
              if (RESULT !== FAIL) break;
              
              this._position = INITPOS;
              while (true) { // SEQUENCE
                while (true) { // NEGATE
                  let INITPOS = this._position;
                  
                  RESULT = this.char("\'");
                  if (RESULT === FAIL) RESULT = null;
                  else                 RESULT = FAIL;
                  
                  this._position = INITPOS;
                  break;
                }
                if (RESULT === FAIL) break;
                
                RESULT = this.char();
                if (RESULT === FAIL) break;
                
                break;
              }
              if (RESULT !== FAIL) break;
  
              break;
            }
            if (RESULT === FAIL) {
              this._position = INITPOS;
              break;
            }
            
            ARRAY.push(RESULT);
          }
          
          RESULT = ARRAY;
          break;
        }
        if (RESULT === FAIL) break;
        
        RESULT = this.char("\'");
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.char("`");
        if (RESULT === FAIL) break;
        
        while (true) { // REPEAT
          let ARRAY = [];
          
          while (true) {
            let INITPOS = this._position;
            
            while (true) { // CHOICE
              let INITPOS = this._position;
              
              this._position = INITPOS;
              while (true) { // SEQUENCE
                RESULT = this.string("${");
                if (RESULT === FAIL) break;
                
                while (true) { // REPEAT
                  let ARRAY = [];
                  
                  while (true) {
                    let INITPOS = this._position;
                    
                    RESULT = this.jsEnclosedFragment();
                    if (RESULT === FAIL) {
                      this._position = INITPOS;
                      break;
                    }
                    
                    ARRAY.push(RESULT);
                  }
                  
                  RESULT = ARRAY;
                  break;
                }
                if (RESULT === FAIL) break;
                
                RESULT = this.string("}");
                if (RESULT === FAIL) break;
                
                break;
              }
              if (RESULT !== FAIL) break;
              
              this._position = INITPOS;
              while (true) { // SEQUENCE
                RESULT = this.char("\\");
                if (RESULT === FAIL) break;
                
                RESULT = this.char();
                if (RESULT === FAIL) break;
                
                break;
              }
              if (RESULT !== FAIL) break;
              
              this._position = INITPOS;
              while (true) { // SEQUENCE
                while (true) { // NEGATE
                  let INITPOS = this._position;
                  
                  RESULT = this.char("`");
                  if (RESULT === FAIL) RESULT = null;
                  else                 RESULT = FAIL;
                  
                  this._position = INITPOS;
                  break;
                }
                if (RESULT === FAIL) break;
                
                RESULT = this.char();
                if (RESULT === FAIL) break;
                
                break;
              }
              if (RESULT !== FAIL) break;
  
              break;
            }
            if (RESULT === FAIL) {
              this._position = INITPOS;
              break;
            }
            
            ARRAY.push(RESULT);
          }
          
          RESULT = ARRAY;
          break;
        }
        if (RESULT === FAIL) break;
        
        RESULT = this.char("`");
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      while (true) { // SEQUENCE
        while (true) { // NEGATE
          let INITPOS = this._position;
          
          RESULT = this.char("()[]{}\"\'`");
          if (RESULT === FAIL) RESULT = null;
          else                 RESULT = FAIL;
          
          this._position = INITPOS;
          break;
        }
        if (RESULT === FAIL) break;
        
        RESULT = this.char();
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
  
      break;
    }
    
    return RESULT;
  }
  
  id(expected) {
    let RESULT = FAIL;
    let i;
    
    while (true) { // SEQUENCE
      while (true) { // REPEAT
        let ARRAY = [];
        
        while (true) {
          let INITPOS = this._position;
          
          RESULT = this.ws();
          if (RESULT === FAIL) {
            this._position = INITPOS;
            break;
          }
          
          ARRAY.push(RESULT);
        }
        
        RESULT = ARRAY;
        break;
      }
      if (RESULT === FAIL) break;
      
      RESULT = this.text(
        () => {
          let RESULT = FAIL;
          
          while (true) { // SEQUENCE
            RESULT = this.initIdChar();
            if (RESULT === FAIL) break;
            
            while (true) { // REPEAT
              let ARRAY = [];
              
              while (true) {
                let INITPOS = this._position;
                
                RESULT = this.restIdChar();
                if (RESULT === FAIL) {
                  this._position = INITPOS;
                  break;
                }
                
                ARRAY.push(RESULT);
              }
              
              RESULT = ARRAY;
              break;
            }
            if (RESULT === FAIL) break;
            
            break;
          }
          
          return RESULT;
        }
      );
      i = RESULT;
      if (RESULT === FAIL) break;
      
      RESULT = (((expected != null && expected === i) || (expected == null)) ? null : FAIL);
      if (RESULT === FAIL) break;
      
      RESULT = i;
      if (RESULT === FAIL) break;
      
      break;
    }
    
    return RESULT;
  }
  
  tag() {
    let RESULT = FAIL;
    
    while (true) { // SEQUENCE
      while (true) { // REPEAT
        let ARRAY = [];
        
        while (true) {
          let INITPOS = this._position;
          
          RESULT = this.ws();
          if (RESULT === FAIL) {
            this._position = INITPOS;
            break;
          }
          
          ARRAY.push(RESULT);
        }
        
        RESULT = ARRAY;
        break;
      }
      if (RESULT === FAIL) break;
      
      RESULT = this.text(
        () => {
          let RESULT = FAIL;
          
          while (true) { // SEQUENCE
            RESULT = this.initTagChar();
            if (RESULT === FAIL) break;
            
            while (true) { // REPEAT
              let ARRAY = [];
              
              while (true) {
                let INITPOS = this._position;
                
                RESULT = this.restTagChar();
                if (RESULT === FAIL) {
                  this._position = INITPOS;
                  break;
                }
                
                ARRAY.push(RESULT);
              }
              
              RESULT = ARRAY;
              break;
            }
            if (RESULT === FAIL) break;
            
            break;
          }
          
          return RESULT;
        }
      );
      if (RESULT === FAIL) break;
      
      break;
    }
    
    return RESULT;
  }
  
  str() {
    let RESULT = FAIL;
    
    while (true) { // SEQUENCE
      while (true) { // REPEAT
        let ARRAY = [];
        
        while (true) {
          let INITPOS = this._position;
          
          RESULT = this.ws();
          if (RESULT === FAIL) {
            this._position = INITPOS;
            break;
          }
          
          ARRAY.push(RESULT);
        }
        
        RESULT = ARRAY;
        break;
      }
      if (RESULT === FAIL) break;
      
      RESULT = this.text(
        () => {
          let RESULT = FAIL;
          
          while (true) { // SEQUENCE
            RESULT = this.char("\"");
            if (RESULT === FAIL) break;
            
            while (true) { // REPEAT
              let ARRAY = [];
              
              while (true) {
                let INITPOS = this._position;
                
                while (true) { // CHOICE
                  let INITPOS = this._position;
                  
                  this._position = INITPOS;
                  while (true) { // SEQUENCE
                    RESULT = this.char("\\");
                    if (RESULT === FAIL) break;
                    
                    RESULT = this.char();
                    if (RESULT === FAIL) break;
                    
                    break;
                  }
                  if (RESULT !== FAIL) break;
                  
                  this._position = INITPOS;
                  while (true) { // SEQUENCE
                    while (true) { // NEGATE
                      let INITPOS = this._position;
                      
                      RESULT = this.char("\"");
                      if (RESULT === FAIL) RESULT = null;
                      else                 RESULT = FAIL;
                      
                      this._position = INITPOS;
                      break;
                    }
                    if (RESULT === FAIL) break;
                    
                    RESULT = this.char();
                    if (RESULT === FAIL) break;
                    
                    break;
                  }
                  if (RESULT !== FAIL) break;
  
                  break;
                }
                if (RESULT === FAIL) {
                  this._position = INITPOS;
                  break;
                }
                
                ARRAY.push(RESULT);
              }
              
              RESULT = ARRAY;
              break;
            }
            if (RESULT === FAIL) break;
            
            RESULT = this.char("\"");
            if (RESULT === FAIL) break;
            
            break;
          }
          
          return RESULT;
        }
      );
      if (RESULT === FAIL) break;
      
      break;
    }
    
    return RESULT;
  }
  
  p(charset) {
    let RESULT = FAIL;
    
    while (true) { // SEQUENCE
      while (true) { // REPEAT
        let ARRAY = [];
        
        while (true) {
          let INITPOS = this._position;
          
          RESULT = this.ws();
          if (RESULT === FAIL) {
            this._position = INITPOS;
            break;
          }
          
          ARRAY.push(RESULT);
        }
        
        RESULT = ARRAY;
        break;
      }
      if (RESULT === FAIL) break;
      
      RESULT = this.string(charset);
      if (RESULT === FAIL) break;
      
      break;
    }
    
    return RESULT;
  }
  
  end() {
    let RESULT = FAIL;
    
    while (true) { // SEQUENCE
      while (true) { // REPEAT
        let ARRAY = [];
        
        while (true) {
          let INITPOS = this._position;
          
          RESULT = this.ws();
          if (RESULT === FAIL) {
            this._position = INITPOS;
            break;
          }
          
          ARRAY.push(RESULT);
        }
        
        RESULT = ARRAY;
        break;
      }
      if (RESULT === FAIL) break;
      
      while (true) { // NEGATE
        let INITPOS = this._position;
        
        RESULT = this.char();
        if (RESULT === FAIL) RESULT = null;
        else                 RESULT = FAIL;
        
        this._position = INITPOS;
        break;
      }
      if (RESULT === FAIL) break;
      
      break;
    }
    
    return RESULT;
  }
  
  initIdChar() {
    let RESULT = FAIL;
    
    while (true) { // CHOICE
      let INITPOS = this._position;
      
      this._position = INITPOS;
      RESULT = this.range("A", "Z");
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      RESULT = this.range("a", "z");
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      RESULT = this.char("_");
      if (RESULT !== FAIL) break;
  
      break;
    }
    
    return RESULT;
  }
  
  restIdChar() {
    let RESULT = FAIL;
    
    while (true) { // CHOICE
      let INITPOS = this._position;
      
      this._position = INITPOS;
      RESULT = this.range("A", "Z");
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      RESULT = this.range("a", "z");
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      RESULT = this.char("_");
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      RESULT = this.range("0", "9");
      if (RESULT !== FAIL) break;
  
      break;
    }
    
    return RESULT;
  }
  
  initTagChar() {
    let RESULT = FAIL;
    
    RESULT = this.range("A", "Z");
    
    return RESULT;
  }
  
  restTagChar() {
    let RESULT = FAIL;
    
    while (true) { // CHOICE
      let INITPOS = this._position;
      
      this._position = INITPOS;
      RESULT = this.range("A", "Z");
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      RESULT = this.char("_");
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      RESULT = this.range("0", "9");
      if (RESULT !== FAIL) break;
  
      break;
    }
    
    return RESULT;
  }
  
  ws() {
    let RESULT = FAIL;
    
    while (true) { // CHOICE
      let INITPOS = this._position;
      
      this._position = INITPOS;
      RESULT = this.char(" \t");
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      RESULT = this.newline();
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.string("//");
        if (RESULT === FAIL) break;
        
        while (true) { // REPEAT
          let ARRAY = [];
          
          while (true) {
            let INITPOS = this._position;
            
            while (true) { // SEQUENCE
              while (true) { // NEGATE
                let INITPOS = this._position;
                
                RESULT = this.newline();
                if (RESULT === FAIL) RESULT = null;
                else                 RESULT = FAIL;
                
                this._position = INITPOS;
                break;
              }
              if (RESULT === FAIL) break;
              
              RESULT = this.char();
              if (RESULT === FAIL) break;
              
              break;
            }
            if (RESULT === FAIL) {
              this._position = INITPOS;
              break;
            }
            
            ARRAY.push(RESULT);
          }
          
          RESULT = ARRAY;
          break;
        }
        if (RESULT === FAIL) break;
        
        RESULT = this.newline();
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.string("/*");
        if (RESULT === FAIL) break;
        
        while (true) { // REPEAT
          let ARRAY = [];
          
          while (true) {
            let INITPOS = this._position;
            
            while (true) { // SEQUENCE
              while (true) { // NEGATE
                let INITPOS = this._position;
                
                RESULT = this.string("*/");
                if (RESULT === FAIL) RESULT = null;
                else                 RESULT = FAIL;
                
                this._position = INITPOS;
                break;
              }
              if (RESULT === FAIL) break;
              
              RESULT = this.char();
              if (RESULT === FAIL) break;
              
              break;
            }
            if (RESULT === FAIL) {
              this._position = INITPOS;
              break;
            }
            
            ARRAY.push(RESULT);
          }
          
          RESULT = ARRAY;
          break;
        }
        if (RESULT === FAIL) break;
        
        RESULT = this.string("*/");
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
  
      break;
    }
    
    return RESULT;
  }
  
  newline() {
    let RESULT = FAIL;
    
    while (true) { // CHOICE
      let INITPOS = this._position;
      
      this._position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.char("\r");
        if (RESULT === FAIL) break;
        
        while (true) { // OPTIONAL
          let INITPOS = this._position;
          
          RESULT = this.char("\n");
          if (RESULT === FAIL) {
            this._position = INITPOS;
            RESULT = null;
          }
          break;
        }
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this._position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.char("\n");
        if (RESULT === FAIL) break;
        
        while (true) { // OPTIONAL
          let INITPOS = this._position;
          
          RESULT = this.char("\r");
          if (RESULT === FAIL) {
            this._position = INITPOS;
            RESULT = null;
          }
          break;
        }
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
  
      break;
    }
    
    return RESULT;
  }
  
}
