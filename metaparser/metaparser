#!/usr/bin/env node
//
// The Metaparser Compiler Language
//
// Copyright 2019 Lorenz Pretterhofer <krysole@alexicalmistake.com>
//
// Permission to use, copy, modify, and distribute this work for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE WORK IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS WORK INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS WORK.
//
"use strict";

let fs                = require("fs");
let { inspect }       = require("util");

let ScannerlessParser = require("./ScannerlessParser.js");
let TokenParser       = require("./TokenParser.js");
let Simplify          = require("./Simplify.js");
let LeftFactor        = require("./LeftFactor.js");
let LeftRecursion     = require("./LeftRecursion.js");
let AnalyzeBindings   = require("./AnalyzeBindings.js");
let Generate          = require("./Generate.js");

function main() {
  let outputType = null;
  let outputPath = null;
  let inputPath  = null;
  let tokenFlag  = false;

  let i = 2;
  let c = process.argv.length;
  while (i < c) {
    let o = process.argv[i++];

    // Display usage and exit if help is specified.
    if (o === "--help") {
      usage();
    }

    // Select token parser mode instead of scannerless mode.
    if (o === "--token") {
      tokenFlag = true;
      continue;
    }

    // Compiler output-mode.
    if (o === "--parse") {
      if (outputType != null) abort(`Cannot specify multiple outputs.`);
      outputType = `parse`;
      continue;
    }
    if (o === "--simplify") {
      if (outputType != null) abort(`Cannot specify multiple outputs.`);
      outputType = `simplify`;
      continue;
    }
    if (o === "--analyze") {
      if (outputType != null) abort(`Cannot specify multiple outputs.`);
      outputType = `analyze`;
      continue;
    }
    if (o === "--generate") {
      if (outputType != null) abort(`Cannot specify multiple outputs.`);
      outputType = `generate`;
      continue;
    }

    // Output target file path.
    if (o === "--out") {
      if (i === c)            abort(`Expected path argument for --out.`);
      if (outputPath != null) abort(`Cannot specify --out twice.`);
      outputPath = process.argv[i++];
      continue;
    }

    // Short options
    if (o.match(/^-[a-zA-Z0-9]+$/)) {
      for (let si = 1, sc = o.length; si < sc; si++) {
        let so = o[si];

        // Display usage and exit if help is specified.
        if (so === "h") {
          usage();
        }

        // Output target file path.
        if (so === "o") {
          if (i === c)            abort(`Expected path argument for -o.`);
          if (outputPath != null) abort(`Cannot specify -o twice.`);
          outputPath = process.argv[i++];
          continue;
        }

        // Unrecognized short option.
        abort(`Unrecognized short option ${so}.`);
      }
      continue;
    }

    // Unrecognized regular option.
    if (o.match(/^--.*$/)) {
      abort(`Unrecognized option ${o}.`);
    }

    // Grammar file.
    if (inputPath != null) abort(`Cannot specify input twice.`);
    inputPath = o;
  }

  // Set default options where not explicitly specified.
  if (outputType == null) outputType = `generate`;

  // Ensure that required options are present.
  if (inputPath == null) usage();


  // Read input.
  if (!fs.existsSync(inputPath)) abort(`Specified input-path ${inputPath} does not exist.`);
  let inputString = fs.readFileSync(inputPath, "utf8");


  // Parse input.
  let ast;
  if (tokenFlag) ast = new TokenParser().match("grammar", inputString, inputPath);
  else           ast = new ScannerlessParser().match("grammar", inputString, inputPath);
  if (outputType === "parse") {
    output(outputPath, inspect(ast, { depth: null }) + "\n");
  }


  // Simplify AST.
  Simplify(ast);
  LeftFactor(ast);
  Simplify(ast);
  LeftRecursion(ast);
  Simplify(ast);
  if (outputType === "simplify") {
    output(outputPath, inspect(ast, { depth: null }) + "\n")
  }


  // Analyze AST.
  AnalyzeBindings(ast);
  if (outputType === "analyze") {
    output(outputPath, inspect(ast, { depth: null }) + "\n")
  }


  // Generate JavaScript.
  Generate(ast, "", tokenFlag);
  if (outputType === "generate") {
    output(outputPath, ast.js);
  }


  throw new Error();
}

function abort(message) {
  console.error(message);
  process.exit(1);
}

function output(path, string) {
  if (path != null) fs.writeFileSync(path, string);
  else              process.stdout.write(string);
  process.exit(0);
}

function usage() {
  console.error(`usage: metaparser [-o output-path] input-path`);
  console.error(``);
  console.error(`       --parse              Output Grammar AST`);
  console.error(`       --simplify           Output Simplified AST`);
  console.error(`       --generate (default) Output Generated JavaScript`);
  console.error(`       --token              Parser should use token input mode.`);
  console.error(`  -o | --out path           Write output to path`);
  console.error(`  -h | --help               Display this message`);
  console.error(``);
  process.exit(1);
}

setTimeout(main);
